# [tested version]
# Version 1.1.0 (2019-01-21)
# 
# [how to use]
# Base.MainInclude.include( "GitHub/ProjectEuler/JuliaLang/Problem0002/0002_01.jl" )
# 

# Project Euler
# https://projecteuler.net/problem=2
# Problem 0002 [Even Fibonacci numbers]
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

# <module>s to use
Base.MainInclude.include( "..\\support\\support_projecteuler.jl" )

module Problem0002

	# <function>s can be called
	export show_result

	# calculate the value of Fibonacci sequence's `term`-th term recursively
	function calc_FibonacciNum( term::Core.Integer )
		
		if Base.isequal( term , Base.one( term ) )
			return Base.one( term )
		elseif Base.isequal( term , Base.one( term )*2 )
			return Base.one( term )*2
		else
			return calc_FibonacciNum( term-1 ) + calc_FibonacciNum( term-2 )
		end
	end

	# calculate the target sum of the even-valued terms whose values do not exceed `max`
	function calc_TheSum( max::Core.Integer )

		# argument of this function
		# [1] max::Core.Integer
		# calculate the target sum of the even-valued terms whose values do not exceed `max`

		# STEP.01
		# initialize the variable to store the target sum and an iterator
		sum = Base.zero( max )
		itr = Base.one( max )

		# STEP.02
		# calculate the target sum
		while Base.isless( sum, max )

			# STEP.02.01
			# update the Fibonacci sequence
			buf_Fibonacci = calc_FibonacciNum( itr )

			# STEP.02.02
			# update the target sum
			if Base.isequal( Base.rem( buf_Fibonacci, 2 ), Base.zero( max ) )
				sum += buf_Fibonacci
			end

			# STEP.02.03
			# update the iterator
			itr += Base.one( max )

		end

		# STEP.TRUE_END
		return sum

	end

	# show the result of main function `calc_TheSum`
	function show_result( max::Core.Integer )

		# argument of this function
		# [1] max::Core.Integer
		# calculate the value of Fibonacci sequence's `max`-th max recursively

		# STEP.01
		retval, t, bytes, gctime, memallocs = Base.@timed calc_TheSum( max )

		# STEP.02
		Main.SupportProjectEuler.println_timed( t, bytes, gctime, memallocs )
		
		# STEP.03
		Base.println( Base.stdout , "[returned value]" )
		Base.println( Base.stdout , "max    : ", max )
		Base.println( Base.stdout , "result : ", retval, "\n" )
		
	end

end

Main.Problem0002.show_result( Base.convert( Core.UInt32, 4*10^6 ) )
