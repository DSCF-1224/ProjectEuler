# file created : 2018.10.28
# file updated : 2018.10.29
# 
# Version 1.0.0 (2018-08-08)
# Base.MainInclude.include( "ProjectEuler/Problem0002/0002_01.jl" )
# 

# Project Euler
# https://projecteuler.net/problem=2
# Problem 0002 [Even Fibonacci numbers]
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

function FibonacciNum( term::Core.Integer )
	
	if Base.isequal( term , Base.one( term ) )
		return Base.one( term )
	elseif Base.isequal( term , Base.one( term )*2 )
		return Base.one( term )*2
	else
		return Base.Checked.checked_add( FibonacciNum( term-1 ), FibonacciNum( term-2 ) )
	end
end

function test( num_terms::Core.Integer )

	for itr âˆˆ Base.one( num_terms ) : num_terms
		Base.Printf.@printf( Base.stdout , "%4d %20d\n" , itr, FibonacciNum( itr ) )
	end

	return Core.nothing

end

# Base.@timev test( 20 )
# 0.067292 seconds (70.60 k allocations: 3.647 MiB)
# elapsed time (ns): 67291701
# bytes allocated:   3824054
# pool allocs:       70590
# non-pool GC allocs:10

# Base.@timev test( 30 )
# 0.088059 seconds (71.01 k allocations: 3.656 MiB)
# elapsed time (ns): 88058581
# bytes allocated:   3833190
# pool allocs:       71002
# non-pool GC allocs:10

# Base.@timev test( 40 )
# 1.342948 seconds (71.38 k allocations: 3.664 MiB)
# elapsed time (ns): 1342947847
# bytes allocated:   3842262
# pool allocs:       71374
# non-pool GC allocs:10

Base.@timev test( 50 )
# 154.681747 seconds (71.71 k allocations: 3.672 MiB)
# elapsed time (ns): 154681747141
# bytes allocated:   3850166
# pool allocs:       71703
# non-pool GC allocs:10