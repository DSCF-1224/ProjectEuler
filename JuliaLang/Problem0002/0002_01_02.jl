# file created : 2018.10.28
# file updated : 2018.10.29
# 
# Version 1.0.0 (2018-08-08)
# Base.MainInclude.include( "ProjectEuler/Problem0002/0002_03.jl" )
# 

# Project Euler
# https://projecteuler.net/problem=2
# Problem 0002 [Even Fibonacci numbers]
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

# references
# http://nbviewer.jupyter.org/gist/genkuroki/1ac59bb3e03eac12945d7040d4f98246#%E9%85%8D%E5%88%97%E5%A4%89%E6%95%B0%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96

function FibonacciNum( term::Core.Integer )
	
	if Base.isequal( term , Base.one( term ) )
		return Base.one( term )
	elseif Base.isequal( term , Base.one( term )*2 )
		return Base.one( term )*2
	else
		return Base.Checked.checked_add( FibonacciNum( term-1 ), FibonacciNum( term-2 ) )
	end
end

function problem0002( upperlimit::Core.Integer )

	# STEP.01
	# initialize the buffer of sum , counter and buffer of Fibonacci numbers
	sum       = Base.zero( upperlimit )
	counter   = Base.one( upperlimit )
	fibonacci = sum

	# STEP.03
	# calculate the target sum
	while Base.isless( fibonacci , upperlimit )

		# STEP.03.01
		# calculate the Fibonacci number
		fibonacci = FibonacciNum( counter )

		# STEP.03.02
		# calculate the target sum
		if Base.iseven( fibonacci )
			sum = Base.Checked.checked_add( sum, fibonacci )
		end

		# STEP.03.03
		# update the counter
		counter = Base.Checked.checked_add( counter, Base.one( upperlimit ) )
		
	end

	# STEP.END
	return sum
end

# upperlimit_target = 4*10^6
# Base.@timev Base.Printf.@printf( Base.stdout , "%d\n" , problem0002( upperlimit_target ) )
# 0.045422 seconds (38.24 k allocations: 2.050 MiB)
# elapsed time (ns): 45421674
# bytes allocated:   2149736
# pool allocs:       38244

# upperlimit_target = 4*10^7
# Base.@timev Base.Printf.@printf( Base.stdout , "%d\n" , problem0002( upperlimit_target ) )
# 0.388606 seconds (38.24 k allocations: 2.050 MiB)
# elapsed time (ns): 388605734
# bytes allocated:   2149928
# pool allocs:       38244

# upperlimit_target = 4*10^8
# Base.@timev Base.Printf.@printf( Base.stdout , "%d\n" , problem0002( upperlimit_target ) )
# 2.625013 seconds (38.24 k allocations: 2.050 MiB)
# elapsed time (ns): 2625012638
# bytes allocated:   2149528
# pool allocs:       38243

# upperlimit_target = 4*10^9
# Base.@timev Base.Printf.@printf( Base.stdout , "%d\n" , problem0002( upperlimit_target ) )
# 31.463244 seconds (38.24 k allocations: 2.050 MiB)
# elapsed time (ns): 31463244435
# bytes allocated:   2149736
# pool allocs:       38244
