# [tested version]
# Version 1.1.0 (2019-01-21)
# 
# [how to use]
# Base.MainInclude.include( "0002_01_common.jl" )

# Project Euler Problem 0002 [Even Fibonacci numbers]
# https://projecteuler.net/problem=2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

#==============================================================================================================================#
# own defined functions are below                                                                                              #
#==============================================================================================================================#

# calculate the value of Fibonacci sequence's `term`-th term recursively
function calc_FibonacciNum( term::Core.Integer )
	
	if Base.isequal( term , Base.one( term ) )
		return Base.one( term )
	elseif Base.isequal( term , Base.one( term )*2 )
		return Base.one( term )*2
	else
		return calc_FibonacciNum( term-1 ) + calc_FibonacciNum( term-2 )
	end

end
